{"version":3,"file":"static/js/500.a86de1e6.chunk.js","mappings":"mTAGaA,GAAYC,EAAAA,EAAAA,GAAOC,EAAAA,IAAPD,CAAH,gFAMTE,EAAmBF,EAAAA,EAAAA,IAAH,+GAShBG,EAAiBH,EAAAA,EAAAA,IAAH,8EAOdI,EAAqBJ,EAAAA,EAAAA,IAAH,6KAWlBK,EAAqBL,EAAAA,EAAAA,GAAH,+O,+GClCxB,SAASM,EAAiBC,GAC/B,OAAOA,EAAQC,KACb,kBAI0B,CACxBC,OALF,EACEA,OAKAC,YANF,EAEEC,eAAkBD,YAKlBE,QAPF,EAGEA,QAHF,GAUH,C,0CCRc,SAASC,EAAT,GAA0C,IAAnBN,EAAkB,EAAlBA,QAC5BE,EAAiCF,EAAjCE,OAAQC,EAAyBH,EAAzBG,YAAaE,EAAYL,EAAZK,QAC7B,OACE,2BACE,gBAAKE,IAAG,wCAAmCJ,GAAeK,IAAKN,KAC/D,4BACE,wBAAKA,KACL,uBAAIG,IAAY,SAIvB,C,cCTc,SAASI,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GAER,GAA8BE,EAAAA,EAAAA,UAA8B,IAA5D,eAAOZ,EAAP,KAAgBa,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,mGAElBL,EAFkB,gCAGGM,EAAAA,GAAyBN,GAH5B,OAGdO,EAHc,OAIdjB,EAAUD,EAAiBkB,EAASC,KAAKC,SAE/CN,EAAWb,GANS,uDAStBoB,QAAQC,IAAR,MATsB,yDAAH,qDAavBN,GACD,GAAE,CAACL,KAGF,SAAC,KAAD,UACGV,EAAQC,KAAI,SAAAqB,GAAM,OACjB,SAAChB,EAAD,CAAaN,QAASsB,GAAaA,EAAOjB,QADzB,KAKxB,C,qKCjCUkB,EAAa,IAAIC,gBAiC5B,SAASC,IACP,OAAOC,EAAAA,EAAAA,IAAU,qBAAsB,CACrCC,OAAQJ,EAAWI,QAEtB,CAED,SAASC,EAAaC,GAA2C,IAA5BC,EAA2B,uDAApB,EAC1C,OAAOJ,EAAAA,EAAAA,IAAA,6BAAgCG,EAAhC,iBAA8CC,GACtD,CAED,SAASC,EAAgBC,GACvB,OAAON,EAAAA,EAAAA,IAAA,gBAAmBM,GAC3B,CAED,SAASC,EAAgBD,GACvB,OAAON,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,YACR,CAED,SAASE,EAAgBF,GACvB,OAAON,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,YACR,CAhDDN,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAHE,6NAIFA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBS,SAAU,QACVC,QAAS,kBACTC,eAAe,E","sources":["components/MovieCard/MovieCard.styled.tsx","helpers/normalizeReviews.ts","components/ReviewsItem/ReviewsItem.tsx","components/Reviews/Reviews.tsx","services/movie-api.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { FiArrowLeft } from 'react-icons/fi';\n\nexport const ArrowIcon = styled(FiArrowLeft)`\n  margin-right: 12px;\n  width: 24px;\n  height: 16px;\n`;\n\nexport const ArrowBackWrapper = styled.div`\n  margin-bottom: 16px;\n  font-size: 20px;\n\n  &:hover {\n    color: orangered;\n  }\n`;\n\nexport const MovieContainer = styled.div`\n  display: flex;\n  gap: 24px;\n\n  font-size: 18px;\n`;\n\nexport const AdditionalInfoLink = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-top: 12px;\n  font-size: 18px;\n  font-weight: bold;\n\n  color: orangered;\n  text-decoration: underline;\n`;\n\nexport const AdditionalInfoList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n\n  li {\n    align-items: start;\n    display: flex;\n    gap: 12px;\n  }\n\n  div {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n`;\n","import { INormalizedReview, IReview } from 'interfaces/IReviews';\n\nexport function normalizeReviews(reviews: IReview[]) {\n  return reviews.map(\n    ({\n      author,\n      author_details: { avatar_path },\n      content,\n    }): INormalizedReview => ({\n      author,\n      avatar_path,\n      content,\n    })\n  );\n}\n","import { INormalizedReview } from 'interfaces/IReviews';\n\ninterface Props {\n  reviews: INormalizedReview;\n}\n\nexport default function ReviewsItem({ reviews }: Props) {\n  const { author, avatar_path, content } = reviews;\n  return (\n    <li>\n      <img src={`https://image.tmdb.org/t/p/w45${avatar_path}`} alt={author} />\n      <div>\n        <h4>{author}</h4>\n        <p>{content}</p>.\n      </div>\n    </li>\n  );\n}\n","import { normalizeReviews } from 'helpers/normalizeReviews';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as movieAPI from 'services/movie-api';\nimport ReviewsItem from 'components/ReviewsItem/ReviewsItem';\nimport { AdditionalInfoList } from 'components/MovieCard/MovieCard.styled';\nimport { INormalizedReview } from 'interfaces/IReviews';\n\nexport default function Reviews() {\n  const { id } = useParams();\n\n  const [reviews, setReviews] = useState<INormalizedReview[]>([]);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        if (id) {\n          const response = await movieAPI.getMovieReviews(id);\n          const reviews = normalizeReviews(response.data.results);\n\n          setReviews(reviews);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [id]);\n\n  return (\n    <AdditionalInfoList>\n      {reviews.map(review => (\n        <ReviewsItem reviews={review} key={review.content} />\n      ))}\n    </AdditionalInfoList>\n  );\n}\n","import { IMovie } from 'interfaces/IMovie';\nimport axios from 'axios';\nimport { IReview } from 'interfaces/IReviews';\nimport { ICast } from 'interfaces/ICast';\nexport let controller = new AbortController();\n\nconst API_KEY =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MDllNDQ3NzZkODk4M2I4MjUxZGIyM2UwYTBkMDc2NCIsInN1YiI6IjY0OTk0ZWIxNmY0M2VjMDEzOTliMDJmMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.zfMWjVI_xe7Qrg38kb3t2TBDdyF9nQKUMfvJwYSbESc';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] = API_KEY;\naxios.defaults.params = {\n  language: 'en-US',\n  sort_by: 'popularity.desc',\n  include_adult: false,\n};\n\ninterface Movies {\n  data: { results: IMovie[] };\n}\n\ninterface SingleMovie {\n  data: IMovie;\n}\n\ninterface SingleReview {\n  data: {\n    results: IReview[];\n  };\n}\n\ninterface SingleCast {\n  data: {\n    cast: ICast[];\n  };\n}\n\nfunction getTrendingMovies(): Promise<Movies> {\n  return axios.get('trending/movie/day', {\n    signal: controller.signal,\n  });\n}\n\nfunction searchMovies(query: string, page = 1): Promise<Movies> {\n  return axios.get(`search/movie?query=${query}&page=${page}`);\n}\n\nfunction getMovieDetails(movieId: string): Promise<SingleMovie> {\n  return axios.get(`movie/${movieId}`);\n}\n\nfunction getMovieCredits(movieId: string): Promise<SingleCast> {\n  return axios.get(`movie/${movieId}/credits`);\n}\n\nfunction getMovieReviews(movieId: string): Promise<SingleReview> {\n  return axios.get(`movie/${movieId}/reviews`);\n}\n\nexport {\n  getTrendingMovies,\n  searchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["ArrowIcon","styled","FiArrowLeft","ArrowBackWrapper","MovieContainer","AdditionalInfoLink","AdditionalInfoList","normalizeReviews","reviews","map","author","avatar_path","author_details","content","ReviewsItem","src","alt","Reviews","id","useParams","useState","setReviews","useEffect","fetchMovieReviews","movieAPI","response","data","results","console","log","review","controller","AbortController","getTrendingMovies","axios","signal","searchMovies","query","page","getMovieDetails","movieId","getMovieCredits","getMovieReviews","language","sort_by","include_adult"],"sourceRoot":""}